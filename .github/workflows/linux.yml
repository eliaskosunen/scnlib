name: Linux

on:
  push:
    branches:
      - master
      - v*/dev
      - ci/*
      - dev/*
    paths:
      - '.github/workflows/linux.yml'
      - 'benchmark/**'
      - 'cmake/**'
      - 'examples/**'
      - 'include/**'
      - 'src/**'
      - 'tests/**'
      - '**/CMakeLists.txt'
  pull_request:
    branches:
      - master
      - v*/dev
      - ci/*
      - dev/*
    paths:
      - '.github/workflows/linux.yml'
      - 'benchmark/**'
      - 'cmake/**'
      - 'examples/**'
      - 'include/**'
      - 'src/**'
      - 'tests/**'
      - '**/CMakeLists.txt'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref_name }}-${{ github.ref_type == 'branch' && github.sha }}-${{ github.event_name == 'workflow_dispatch' }}-${{ github.event_name == 'schedule' }}-${{ github.event.schedule }}
  cancel-in-progress: true

env:
  APT_INSTALL: |
    sudo apt-get install
      -yq --no-install-suggests --no-install-recommends
      --allow-unauthenticated --allow-downgrades --allow-change-held-packages
  CCACHE_ABSSTDERR: true
  CCACHE_COMPRESS: true
  CCACHE_COMPRESSLEVEL: 6
  CCACHE_DIR: "/tmp/ccache"
  CCACHE_MAXSIZE: 50M
  CCACHE_NOHASHDIR: true
  CCACHE_SLOPPINESS: "pch_defines,time_macros"
  CCACHE_UNIFY: true
  DEBIAN_FRONTEND: noninteractive

jobs:
  # recent gcc versions and pre-installed clang versions on native ubuntu 22.04 and 24.04
  ubuntu:
    runs-on: ubuntu-${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ 22.04 ]
        cxx:
          - g++-12
          - g++-11
          - g++-10
          - g++-9
        std: [ 17 ]

        include:
          # Explicitly pick out pre-installed clang + os pairs -- apt.llvm.org likes to fail on us
          - os: 24.04
            cxx: clang++-18
            std: 17
          - os: 24.04
            cxx: clang++-17
            std: 17
          - os: 24.04
            cxx: clang++-16
            std: 17

          - os: 22.04
            cxx: clang++-15
            std: 17
          - os: 22.04
            cxx: clang++-14
            std: 17
          - os: 22.04
            cxx: clang++-13
            std: 17

          # g++ 12 and 13 (both preinstalled) on 24.04
          - os: 24.04
            cxx: g++-13
            std: 17
          - os: 24.04
            cxx: g++-12
            std: 17

          # newest pre-installed gcc on 22.04 with C++20 and C++23 (C++17 created by the matrix)
          - os: 22.04
            cxx: g++-12
            std: 20
          - os: 22.04
            cxx: g++-12
            std: 23

          # newest pre-installed clang on 22.04 with C++20 and C++23 (C++17 created by the matrix)
          - os: 22.04
            cxx: clang++-13
            std: 20
          - os: 22.04
            cxx: clang++-13
            std: 23

          # newest pre-installed gcc on 24.04, with C++17, C++20, and C++23
          - os: 24.04
            cxx: g++-14
            std: 17
          - os: 24.04
            cxx: g++-14
            std: 20
          - os: 24.04
            cxx: g++-14
            std: 23

          # newest pre-installed clang on 24.04, with C++20 and C++23 (C++17 already provided above)
          - os: 24.04
            cxx: clang++-18
            std: 20
          - os: 24.04
            cxx: clang++-18
            std: 23

    env:
      CXX: ${{ matrix.cxx }}
      OS: ${{ matrix.os }}
      CMAKE_C_COMPILER_LAUNCHER: ccache
      CMAKE_CXX_COMPILER_LAUNCHER: ccache

    steps:
      - name: Setup CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: Create Build Environment
        run: |
          mkdir ${{ runner.workspace }}/build
          
          sudo locale-gen en_US.UTF-8
          sudo locale-gen fi_FI.UTF-8
          sudo update-locale
          sudo locale -a

      - name: Install dependencies
        run: |
          sudo apt-get --allow-unauthenticated -yq update
          
          ${APT_INSTALL} ccache

          if [[ "${CXX}" == "g++-9" ]]; then
            ${APT_INSTALL} g++-9
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Load ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ github.workflow }}-ubuntu${{ matrix.os }}-${{ matrix.cxx }}-std${{ matrix.std }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ github.workflow }}-ubuntu${{ matrix.os }}-${{ matrix.cxx }}-std${{ matrix.std }}-${{ github.ref }}
            ccache-${{ github.workflow }}-ubuntu${{ matrix.os }}-${{ matrix.cxx }}-std${{ matrix.std }}-${{ github.base_ref }}
            ccache-${{ github.workflow }}-ubuntu${{ matrix.os }}-${{ matrix.cxx }}-std${{ matrix.std }}

      - name: Setup ccache
        run: |
          ccache --version
          ccache --zero-stats
          ccache --show-stats
          ccache --show-config

      - name: Run CMake
        working-directory: ${{ runner.workspace }}/build
        run: |
          cmake -G Ninja -DSCN_CI=ON -DSCN_TESTS_LOCALIZED=ON \
                -DCMAKE_CXX_STANDARD=${{ matrix.std }} \
                $GITHUB_WORKSPACE

      - name: Build
        working-directory: ${{ runner.workspace }}/build
        run: cmake --build . --verbose -- -k 0

      - name: Show ccache stats
        run: |
          ccache --show-stats

      - name: Test
        working-directory: ${{ runner.workspace }}/build
        run: ctest --output-on-failure

  # Get older gcc and clang versions through Docker
  # These are the images that still have a working `apt` on them
  # (i.e., they are running Debian Bullseye/11)
  docker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - cxx: clang++-12
            std: 17
            image: silkeh/clang:12
          - cxx: clang++-11
            std: 17
            image: silkeh/clang:11

    container:
      image: ${{ matrix.image }}
      env:
        CCACHE_ABSSTDERR: ${{ env.CCACHE_ABSSTDERR }}
        CCACHE_COMPRESS: ${{ env.CCACHE_COMPRESS }}
        CCACHE_COMPRESSLEVEL: ${{ env.CCACHE_COMPRESSLEVEL }}
        CCACHE_DIR: ${{ env.CCACHE_DIR }}
        CCACHE_MAXSIZE: ${{ env.CCACHE_MAXSIZE }}
        CCACHE_NOHASHDIR: ${{ env.CCACHE_NOHASHDIR }}
        CCACHE_SLOPPINESS: ${{ env.CCACHE_SLOPPINESS }}
        CCACHE_UNIFY: ${{ env.CCACHE_UNIFY }}
        DEBIAN_FRONTEND: ${{ env.DEBIAN_FRONTEND }}
        # gcc images only have "g++", no "g++-N"
        CXX: ${{ startsWith(matrix.cxx, 'g++') && 'g++' || matrix.cxx }}
        CMAKE_C_COMPILER_LAUNCHER: ccache
        CMAKE_CXX_COMPILER_LAUNCHER: ccache

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get --allow-unauthenticated -yq update
          apt-get install \
            -yq --no-install-suggests --no-install-recommends \
            --allow-unauthenticated --allow-downgrades --allow-change-held-packages \
            ccache ninja-build curl git

          mkdir -p $GITHUB_WORKSPACE/deps
          cd $GITHUB_WORKSPACE/deps
          curl -s -L https://github.com/Kitware/CMake/releases/download/v4.0.2/cmake-4.0.2-linux-x86_64.tar.gz \
            | tar xvz -C .
          ln -s $GITHUB_WORKSPACE/deps/cmake-4.0.2-linux-x86_64/bin $GITHUB_WORKSPACE/bin

          $GITHUB_WORKSPACE/bin/cmake --version

      - name: Load ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ github.workflow }}-docker-${{ matrix.cxx }}-std${{ matrix.std }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ github.workflow }}-docker-${{ matrix.cxx }}-std${{ matrix.std }}-${{ github.ref }}
            ccache-${{ github.workflow }}-docker-${{ matrix.cxx }}-std${{ matrix.std }}-${{ github.base_ref }}
            ccache-${{ github.workflow }}-docker-${{ matrix.cxx }}-std${{ matrix.std }}

      - name: Setup ccache
        run: |
          ccache --version
          ccache --zero-stats
          ccache --show-stats
          ccache --show-config || true

      - name: Run CMake
        run: |
          mkdir -p $GITHUB_WORKSPACE/build
          cd $GITHUB_WORKSPACE/build
          $GITHUB_WORKSPACE/bin/cmake -G Ninja -DSCN_CI=ON \
                -DCMAKE_CXX_STANDARD=${{ matrix.std }} \
                $GITHUB_WORKSPACE

      - name: Build
        run: |
          cd $GITHUB_WORKSPACE/build
          $GITHUB_WORKSPACE/bin/cmake --build . --verbose -- -k 0

      - name: Show ccache stats
        run: |
          ccache --show-stats

      - name: Test
        run: |
          cd $GITHUB_WORKSPACE/build
          $GITHUB_WORKSPACE/bin/ctest --output-on-failure

  # Get older gcc and clang versions through Docker
  # These are the images that _don't_ have a working `apt` on them,
  # but using it will 404 when trying to look up the repos
  # (i.e., they are running Debian Buster/10)
  docker-old:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - cxx: g++-8
            std: 17
            image: gcc:8
          - cxx: g++-7
            std: 17
            image: gcc:7
          # gcc 6 image is broken when run in GitHub actions

          - cxx: clang++-10
            std: 17
            image: eliaskosunen/old-clang:10
          # No clang 9: ICEs
          - cxx: clang++-8
            std: 17
            image: eliaskosunen/old-clang:8
          # clang 7 couldn't compile the tests (TODO?)

    container:
      image: ${{ matrix.image }}
      env:
        CCACHE_ABSSTDERR: ${{ env.CCACHE_ABSSTDERR }}
        CCACHE_COMPRESS: ${{ env.CCACHE_COMPRESS }}
        CCACHE_COMPRESSLEVEL: ${{ env.CCACHE_COMPRESSLEVEL }}
        CCACHE_DIR: ${{ env.CCACHE_DIR }}
        CCACHE_MAXSIZE: ${{ env.CCACHE_MAXSIZE }}
        CCACHE_NOHASHDIR: ${{ env.CCACHE_NOHASHDIR }}
        CCACHE_SLOPPINESS: ${{ env.CCACHE_SLOPPINESS }}
        CCACHE_UNIFY: ${{ env.CCACHE_UNIFY }}
        DEBIAN_FRONTEND: ${{ env.DEBIAN_FRONTEND }}
        # gcc images only have "g++", no "g++-N"
        CXX: ${{ startsWith(matrix.cxx, 'g++') && 'g++' || matrix.cxx }}
        CMAKE_C_COMPILER_LAUNCHER: ccache
        CMAKE_CXX_COMPILER_LAUNCHER: ccache

    steps:
      - name: Checkout
        uses: actions/checkout@v4

        # clang images already come with everything we need (they are custom-built)
        # gcc images need cmake, ccache, and ninja
      - name: Install dependencies
        if: startsWith(matrix.cxx, 'g++')
        run: |
          echo /usr/local/bin >> $GITHUB_PATH
          mkdir -p /tmp/deps

          cd /tmp/deps
          curl -s -L https://github.com/Kitware/CMake/releases/download/v4.0.2/cmake-4.0.2-linux-x86_64.tar.gz \
          | tar xz -C .
          cd cmake-4.0.2-linux-x86_64
          cp ./bin/* /usr/local/bin
          cp -r ./share/* /usr/local/share
          cmake --version

          cd /tmp/deps
          curl -s -L https://github.com/ccache/ccache/releases/download/v4.12/ccache-4.12-linux-x86_64.tar.xz \
          | tar xJ -C .
          cp ./ccache-4.12-linux-x86_64/ccache /usr/local/bin
          ccache --version

          cd /tmp/deps
          curl -s -L https://github.com/ninja-build/ninja/archive/refs/tags/v1.13.1.tar.gz \
          | tar xz -C .
          cd ninja-1.13.1
          ./configure.py --bootstrap
          cp ./ninja /usr/local/bin
          ninja --version

      - name: Load ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ github.workflow }}-docker-${{ matrix.cxx }}-std${{ matrix.std }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ github.workflow }}-docker-${{ matrix.cxx }}-std${{ matrix.std }}-${{ github.ref }}
            ccache-${{ github.workflow }}-docker-${{ matrix.cxx }}-std${{ matrix.std }}-${{ github.base_ref }}
            ccache-${{ github.workflow }}-docker-${{ matrix.cxx }}-std${{ matrix.std }}

      - name: Setup ccache
        run: |
          ccache --version
          ccache --zero-stats
          ccache --show-stats
          ccache --show-config || true

      - name: Run CMake
        run: |
          mkdir -p $GITHUB_WORKSPACE/build
          cd $GITHUB_WORKSPACE/build
          cmake -G Ninja -DSCN_CI=ON \
                -DCMAKE_CXX_STANDARD=${{ matrix.std }} \
                $GITHUB_WORKSPACE

      - name: Build
        run: |
          cd $GITHUB_WORKSPACE/build
          cmake --build . --verbose -- -k 0

      - name: Show ccache stats
        run: |
          ccache --show-stats

      - name: Test
        run: |
          cd $GITHUB_WORKSPACE/build
          ctest --output-on-failure

  libcxx:
    runs-on: ubuntu-${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # 24.04 doesn't have libc++ (yet?)
        os: [ 22.04 ]
        std: [ 17, 20, 23 ]

    env:
      CC: clang
      CXX: clang++
      OS: ${{ matrix.os }}
      CMAKE_C_COMPILER_LAUNCHER: ccache
      CMAKE_CXX_COMPILER_LAUNCHER: ccache

    steps:
      - name: Setup CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Build Environment
        run: |
          mkdir -p ${{ runner.workspace }}/build

          ${APT_INSTALL} ccache

          sudo locale-gen en_US.UTF-8
          sudo locale-gen fi_FI.UTF-8
          sudo update-locale
          sudo locale -a

      - name: Load ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ github.workflow }}-ubuntu${{ matrix.os }}-${{ env.CXX }}-std${{ matrix.std }}-libcxx-${{ github.sha }}
          restore-keys: |
            ccache-${{ github.workflow }}-ubuntu${{ matrix.os }}-${{ env.CXX }}-std${{ matrix.std }}-libcxx-${{ github.ref }}
            ccache-${{ github.workflow }}-ubuntu${{ matrix.os }}-${{ env.CXX }}-std${{ matrix.std }}-libcxx-${{ github.base_ref }}
            ccache-${{ github.workflow }}-ubuntu${{ matrix.os }}-${{ env.CXX }}-std${{ matrix.std }}-libcxx

      - name: Setup ccache
        run: |
          ccache --version
          ccache --zero-stats
          ccache --show-stats
          ccache --show-config

      - name: Run CMake
        working-directory: ${{ runner.workspace }}/build
        run: |
          cmake -G Ninja -DSCN_CI=ON -DSCN_TESTS_LOCALIZED=ON \
                -DCMAKE_CXX_STANDARD=${{ matrix.std }} \
                -DCMAKE_CXX_FLAGS="-stdlib=libc++" -DCMAKE_EXE_LINKER_FLAGS="-stdlib=libc++ -lc++abi" \
                $GITHUB_WORKSPACE

      - name: Build
        working-directory: ${{ runner.workspace }}/build
        run: cmake --build . --verbose -- -k 0

      - name: Show ccache stats
        run: |
          ccache --show-stats

      - name: Test
        working-directory: ${{ runner.workspace }}/build
        run: ctest --output-on-failure

  alpine:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: [ 3.14, 3.21 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ github.workflow }}-alpine${{ matrix.version }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ github.workflow }}-alpine${{ matrix.version }}-${{ github.ref }}
            ccache-${{ github.workflow }}-alpine${{ matrix.version }}-${{ github.base_ref }}
            ccache-${{ github.workflow }}-alpine${{ matrix.version }}

      - name: Start docker
        run: |
          docker run -w /src -dit --name alpine \
            -v $PWD:/src \
            -v ${{ env.CCACHE_DIR }}:${{ env.CCACHE_DIR }} \
            -e CCACHE_ABSSTDERR=${{ env.ABSTDERR }} \
            -e CCACHE_COMPRESS=${{ env.CCACHE_COMPRESS }} \
            -e CCACHE_DIR=${{ env.CCACHE_DIR }} \
            -e CCACHE_MAXSIZE=${{ env.CCACHE_MAXSIZE }} \
            -e CCACHE_NOHASHDIR=${{ env.CCACHE_NOHASHDIR }} \
            -e CCACHE_SLOPPINESS=${{ env.CCACHE_SLOPPINESS }} \
            -e CCACHE_UNIFY=${{ env.CCACHE_UNIFY }} \
            -e CMAKE_C_COMPILER_LAUNCHER=ccache \
            -e CMAKE_CXX_COMPILER_LAUNCHER=ccache \
            alpine:${{ matrix.version }}
          echo 'docker exec alpine "$@";' > alpine-run.sh
          chmod +x alpine-run.sh

      - name: Install dependencies
        run: |
          ./alpine-run.sh apk update
          ./alpine-run.sh apk add build-base cmake g++ linux-headers git bash ninja ccache python3

      - name: Setup ccache
        run: |
          ./alpine-run.sh ccache --version
          ./alpine-run.sh ccache --zero-stats
          ./alpine-run.sh ccache --show-stats
          ./alpine-run.sh ccache --show-config

      - name: Run CMake
        run: |
          ./alpine-run.sh cmake -G Ninja -S /src -B build -DSCN_CI=ON

      - name: Build
        run: |
          ./alpine-run.sh cmake --build build --verbose -- -k 0
          ./alpine-run.sh ccache --show-stats

      - name: Test
        run: |
          ./alpine-run.sh bash -c "cd build && ctest --output-on-failure"

  cmake:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        cmake:
          - latest

        generator:
          - Ninja
          - "Ninja Multi-Config"
          - "Unix Makefiles"

        include:
          # 3.16 the stated version in cmake_minimum_required()
          - cmake: "^3.16.0"
            generator: Ninja

    env:
      CXX: g++-13
      CMAKE_C_COMPILER_LAUNCHER: ccache
      CMAKE_CXX_COMPILER_LAUNCHER: ccache
      IS_MULTI_CONFIG: ${{ endsWith(matrix.generator, 'Multi-Config') }}

    steps:
      - name: Setup CMake and Ninja
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: ${{ matrix.cmake }}

      - name: Install dependencies
        run: |
          mkdir ${{ runner.workspace }}/build
          sudo apt-get --allow-unauthenticated -yq update
          ${APT_INSTALL} ccache

      - name: Checkout
        uses: actions/checkout@v4

      - name: Load ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ github.workflow }}-ubuntu24.04-g++-13-std17-cmake-${{ matrix.cmake }}-${{ matrix.generator }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ github.workflow }}-ubuntu24.04-g++-13-std17-cmake-${{ matrix.cmake }}-${{ matrix.generator }}-${{ github.ref }}
            ccache-${{ github.workflow }}-ubuntu24.04-g++-13-std17-cmake-${{ matrix.cmake }}-${{ matrix.generator }}-${{ github.base_ref }}
            ccache-${{ github.workflow }}-ubuntu24.04-g++-13-std17-cmake-${{ matrix.cmake }}-${{ matrix.generator }}
            ccache-${{ github.workflow }}-ubuntu24.04-g++-13-std17-${{ github.sha }}
            ccache-${{ github.workflow }}-ubuntu24.04-g++-13-std17-${{ github.ref }}
            ccache-${{ github.workflow }}-ubuntu24.04-g++-13-std17-${{ github.base_ref }}
            ccache-${{ github.workflow }}-ubuntu24.04-g++-13-std17

      - name: Setup ccache
        run: |
          ccache --version
          ccache --zero-stats
          ccache --show-stats
          ccache --show-config

      - name: Run CMake, Build, Test (single-config)
        if: env.IS_MULTI_CONFIG != 'true'
        working-directory: ${{ runner.workspace }}/build
        run: |
          cmake -G "${{ matrix.generator }}" -DSCN_CI=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_STANDARD=17 \
            $GITHUB_WORKSPACE
          cmake --build . --parallel --verbose
          ctest --output-on-failure

      - name: Run CMake, Build, Test (multi-config)
        if: env.IS_MULTI_CONFIG == 'true'
        working-directory: ${{ runner.workspace }}/build
        run: |
          cmake -G "${{ matrix.generator }}" -DSCN_CI=ON -DCMAKE_CXX_STANDARD=17 \
            $GITHUB_WORKSPACE
          cmake --build . --config Debug --parallel --verbose
          ctest -C Debug --output-on-failure

      - name: Show ccache stats
        run: |
          ccache --show-stats

  asan-and-ubsan:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        std: [ 17, 20 ]
        cxx: [ clang++-18 ]

    env:
      CXX: ${{ matrix.cxx }}
      CMAKE_C_COMPILER_LAUNCHER: ccache
      CMAKE_CXX_COMPILER_LAUNCHER: ccache

    steps:
      - name: Setup CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: Create Build Environment
        run: |
          sudo locale-gen en_US.UTF-8
          sudo locale-gen fi_FI.UTF-8
          sudo update-locale
          sudo locale -a
          
          ${APT_INSTALL} ccache llvm-18 llvm-18-tools llvm-18-dev
          
          mkdir ${{ runner.workspace }}/build

      - name: Checkout
        uses: actions/checkout@v4

      - name: Load ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ matrix.std }}-sanitize-${{ github.sha }}
          restore-keys: |
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ matrix.std }}-sanitize-${{ github.ref }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ matrix.std }}-sanitize-${{ github.base_ref }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ matrix.std }}-sanitize
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ matrix.std }}-${{ github.ref }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ matrix.std }}-${{ github.base_ref }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ matrix.std }}

      - name: Setup ccache
        run: |
          ccache --version
          ccache --zero-stats
          ccache --show-stats
          ccache --show-config

      - name: Run CMake
        working-directory: ${{ runner.workspace }}/build
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug \
                -DCMAKE_CXX_STANDARD=${{ matrix.std }} \
                -DSCN_CI=ON -DSCN_TESTS_LOCALIZED=ON \
                -DSCN_USE_ASAN=ON -DSCN_USE_UBSAN=ON \
                $GITHUB_WORKSPACE

      - name: Build
        working-directory: ${{ runner.workspace }}/build
        run: |
          cmake --build . --verbose -- -k 0

      - name: Show ccache stats
        run: |
          ccache --show-stats

      - name: Test
        working-directory: ${{ runner.workspace }}/build
        run: |
          ASAN_OPTIONS=suppressions=$GITHUB_WORKSPACE/cmake/asan.supp,print_stacktrace=1 \
          LSAN_OPTIONS=suppressions=$GITHUB_WORKSPACE/cmake/lsan.supp,print_stacktrace=1 \
          UBSAN_OPTIONS=suppressions=$GITHUB_WORKSPACE/cmake/ubsan.supp,print_stacktrace=1 \
          ctest --output-on-failure

  install-and-consume:
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        cxx:
         - g++-11
        external_deps: [ 0, 1 ]
        shared_libs: [ "OFF", "ON" ]

        include:
          - cxx: clang++-15
            external_deps: 0
            shared_libs: "OFF"
          - cxx: clang++-15
            external_deps: 0
            shared_libs: "ON"

    env:
      CXX: ${{ matrix.cxx }}
      CMAKE_CXX_STANDARD: 17
      CMAKE_C_COMPILER_LAUNCHER: ccache
      CMAKE_CXX_COMPILER_LAUNCHER: ccache

    steps:
      - name: Setup CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: Install ccache
        run: |
          ${APT_INSTALL} ccache

      - name: Load ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-install${{ matrix.external_deps }}${{ matrix.shared_libs }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-install${{ matrix.external_deps }}${{ matrix.shared_libs }}-${{ github.ref }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-install${{ matrix.external_deps }}${{ matrix.shared_libs }}-${{ github.base_ref }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-install${{ matrix.external_deps }}${{ matrix.shared_libs }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-${{ github.sha }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-${{ github.ref }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-${{ github.base_ref }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}

      - name: Setup ccache
        run: |
          ccache --version
          ccache --zero-stats
          ccache --show-stats
          ccache --show-config

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build fast_float
        if: matrix.external_deps == 1
        run: |
          git clone https://github.com/fastfloat/fast_float -b v6.1.1 --depth=1
          cd fast_float
          mkdir build
          cd build
          cmake -G Ninja -DBUILD_SHARED_LIBS=${{ matrix.shared_libs }} ..
          cmake --build .
          sudo cmake --build . --target install

      - name: Build scnlib
        run: |
          mkdir ${{ runner.workspace }}/lib-build
          cd ${{ runner.workspace }}/lib-build
          if [[ ${{ matrix.external_deps }} -eq 1 ]]; then
            cmake -G Ninja -DSCN_INSTALL=ON -DSCN_ENABLE_EXTRAS=OFF \
                  -DSCN_USE_EXTERNAL_FAST_FLOAT=ON -DBUILD_SHARED_LIBS=${{ matrix.shared_libs }} \
                  $GITHUB_WORKSPACE
          else
            cmake -G Ninja -DSCN_INSTALL=ON -DSCN_ENABLE_EXTRAS=OFF -DBUILD_SHARED_LIBS=${{ matrix.shared_libs }} \
              $GITHUB_WORKSPACE
          fi
          cmake --build . --verbose --target scn
          sudo cmake --build . --target install

      - name: Build consumer
        run: |
          mkdir ${{ runner.workspace }}/consumer-build
          cd ${{ runner.workspace }}/consumer-build
          cmake -DBUILD_SHARED_LIBS=${{ matrix.shared_libs }} $GITHUB_WORKSPACE/tests/consumer-test/library
          cmake --build . --verbose

      - name: Show ccache stats
        run: |
          ccache --show-stats

      - name: Test consumer
        working-directory: ${{ runner.workspace }}/consumer-build
        run: |
          output="$(echo '42' | ./scn-consumer-library)"
          test "$output" -eq 42

  disabled-envs:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - key: iostream
            flags: "-DSCN_DISABLE_IOSTREAM=ON"
            enable_tests: 1
          - key: locale
            flags: "-DSCN_DISABLE_LOCALE=ON"
            enable_tests: 1
          - key: regex
            flags: "-DSCN_DISABLE_REGEX=ON"
            enable_tests: 0 # todo
          - key: chrono
            flags: "-DSCN_DISABLE_CHRONO=ON"
            enable_tests: 1
          - key: float
            flags: "-DSCN_DISABLE_TYPE_FLOAT=ON -DSCN_DISABLE_TYPE_DOUBLE=ON -DSCN_DISABLE_TYPE_LONG_DOUBLE=ON"
            enable_tests: 1
          - key: float-all
            flags: "-DSCN_DISABLE_TYPE_FLOAT=ON -DSCN_DISABLE_TYPE_DOUBLE=ON -DSCN_DISABLE_TYPE_LONG_DOUBLE=ON -DSCN_DISABLE_TYPE_FLOAT16=ON -DSCN_DISABLE_TYPE_FLOAT32=ON -DSCN_DISABLE_TYPE_FLOAT64=ON -DSCN_DISABLE_TYPE_FLOAT128=ON -DSCN_DISABLE_TYPE_BFLOAT16=ON"
            enable_tests: 1
          - key: int128
            flags: "-DSCN_DISABLE_TYPE_INT128=ON -DSCN_DISABLE_TYPE_UINT128=ON"
            enable_tests: 1
          - key: from-chars-and-strtod
            flags: "-DSCN_DISABLE_FROM_CHARS=ON -DSCN_DISABLE_STRTOD=ON"
            enable_tests: 0 # alters the behavior in float tests
          - key: fast-float
            flags: "-DSCN_DISABLE_FAST_FLOAT=ON"
            enable_tests: 0

    env:
      CXX: g++-14
      CMAKE_CXX_STANDARD: 17
      CMAKE_C_COMPILER_LAUNCHER: ccache
      CMAKE_CXX_COMPILER_LAUNCHER: ccache

    steps:
      - name: Setup CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Build Environment
        run: |
          mkdir ${{ runner.workspace }}/build
          ${APT_INSTALL} ccache

      - name: Load ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-disable-${{ matrix.key }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-disable-${{ matrix.key }}-${{ github.ref }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-disable-${{ matrix.key }}-${{ github.base_ref }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-disable-${{ matrix.key }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-${{ github.sha }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-${{ github.ref }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-${{ github.base_ref }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}

      - name: Setup ccache
        run: |
          ccache --version
          ccache --zero-stats
          ccache --show-stats
          ccache --show-config

      - name: Run CMake
        working-directory: ${{ runner.workspace }}/build
        run: |
          cmake -G Ninja -DSCN_CI=ON ${{ matrix.flags }} \
                -DSCN_BENCHMARKS=OFF -DSCN_BENCHMARKS_BUILDTIME=OFF -DSCN_BENCHMARKS_BINARYSIZE=OFF \
                $GITHUB_WORKSPACE

      - name: Build library
        working-directory: ${{ runner.workspace }}/build
        run: cmake --build . --target scn --verbose -- -k 0

      - name: Build tests
        working-directory: ${{ runner.workspace }}/build
        if: matrix.enable_tests == 1
        run: cmake --build . --verbose -- -k 0

      - name: Show ccache stats
        run: |
          ccache --show-stats

      - name: Test
        working-directory: ${{ runner.workspace }}/build
        if: matrix.enable_tests == 1
        run: ctest --output-on-failure

  special-flags:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - tag: fast-math
            cxx_flags: "-ffast-math"
          - tag: full-ieee754
            cxx_flags: "-frounding-math -fsignaling-nans"

    env:
      CXX: g++-14
      CMAKE_CXX_STANDARD: 17
      CMAKE_C_COMPILER_LAUNCHER: ccache
      CMAKE_CXX_COMPILER_LAUNCHER: ccache

    steps:
      - name: Setup CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Build Environment
        run: |
          mkdir ${{ runner.workspace }}/build
          ${APT_INSTALL} ccache

      - name: Load ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-special-${{ matrix.tag }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-special-${{ matrix.tag }}-${{ github.ref }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-special-${{ matrix.tag }}-${{ github.base_ref }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-special-${{ matrix.tag }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-${{ github.sha }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-${{ github.ref }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-${{ github.base_ref }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}

      - name: Setup ccache
        run: |
          ccache --version
          ccache --zero-stats
          ccache --show-stats
          ccache --show-config

      - name: Run CMake
        working-directory: ${{ runner.workspace }}/build
        run: |
          cmake -G Ninja -DSCN_CI=ON -DCMAKE_CXX_FLAGS="${{ matrix.cxx_flags }}" \
                $GITHUB_WORKSPACE

      - name: Build
        working-directory: ${{ runner.workspace }}/build
        run: cmake --build . --target scn --verbose -- -k 0

      - name: Show ccache stats
        run: |
          ccache --show-stats

  regex-backends:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          # No-op, tested above
          #- engine: std
          - engine: Boost
            icu: OFF
          - engine: Boost
            icu: ON
          - engine: re2

    env:
      CC: gcc-13
      CXX: g++-13
      CMAKE_CXX_STANDARD: 20
      CMAKE_C_COMPILER_LAUNCHER: ccache
      CMAKE_CXX_COMPILER_LAUNCHER: ccache

    steps:
      - name: Setup CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: Install ccache
        run: |
          ${APT_INSTALL} ccache

      - name: Install ICU
        if: matrix.icu == 'ON'
        run: |
          ${APT_INSTALL} libicu-dev

      - name: Install Boost
        if: matrix.engine == 'Boost'
        run: |
          ${APT_INSTALL} libboost-regex-dev

      - name: Install re2
        if: matrix.engine == 're2'
        run: |
          sudo apt-get remove -y libre2-dev
          
          git clone https://github.com/abseil/abseil-cpp -b 20250814.1 --depth=1
          cd abseil-cpp
          mkdir build
          cd build
          cmake -G Ninja -DABSL_BUILD_TESTING=OFF -DABSL_ENABLE_INSTALL=ON ..
          sudo cmake --build . --target install
          cd ../..
          
          git clone https://github.com/google/re2 -b 2025-08-12 --depth=1
          cd re2
          mkdir build
          cd build
          cmake -G Ninja ..
          cmake --build .
          sudo cmake --build . --target install

      - name: Checkout
        uses: actions/checkout@v4

      - name: Load ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-regex${{ matrix.engine }}-icu${{ matrix.icu }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-regex${{ matrix.engine }}-icu${{ matrix.icu }}-${{ github.ref }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-regex${{ matrix.engine }}-icu${{ matrix.icu }}-${{ github.base_ref }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-regex${{ matrix.engine }}-icu${{ matrix.icu }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-${{ github.sha }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-${{ github.ref }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}-${{ github.base_ref }}
            ccache-${{ github.workflow }}-ubuntu22.04-${{ env.CXX }}-std${{ env.CMAKE_CXX_STANDARD }}

      - name: Setup ccache
        run: |
          ccache --version
          ccache --zero-stats
          ccache --show-stats
          ccache --show-config

      - name: Run CMake
        run: |
          mkdir ${{ runner.workspace }}/build
          cd ${{ runner.workspace }}/build
          if [[ ${{ matrix.engine }} == "Boost" ]]; then
            icu_flag="-DSCN_REGEX_BOOST_USE_ICU=${{ matrix.icu }}"
          fi
          cmake -G Ninja -DSCN_CI=ON -DSCN_REGEX_BACKEND=${{ matrix.engine }} \
                $icu_flag \
                $GITHUB_WORKSPACE

      - name: Build
        working-directory: ${{ runner.workspace }}/build
        run: cmake --build . --verbose -- -k 0

      - name: Show ccache stats
        run: |
          ccache --show-stats

      - name: Test
        working-directory: ${{ runner.workspace }}/build
        run: ctest --output-on-failure

  emscripten:
    runs-on: ubuntu-22.04

    env:
      CMAKE_CXX_STANDARD: 17
      CMAKE_C_COMPILER_LAUNCHER: ccache
      CMAKE_CXX_COMPILER_LAUNCHER: ccache

    steps:
      - name: Setup CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: Install ccache
        run: |
          ${APT_INSTALL} ccache
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ github.workflow }}-emscripten-${{ github.sha }}
          restore-keys: |
            ccache-${{ github.workflow }}-emscripten-${{ github.ref }}
            ccache-${{ github.workflow }}-emscripten-${{ github.base_ref }}
            ccache-${{ github.workflow }}-emscripten

      - name: Setup ccache
        run: |
          ccache --version
          ccache --zero-stats
          ccache --show-stats
          ccache --show-config

      - name: Setup EMSDK
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: latest
          actions-cache-folder: 'emsdk-cache'

      - name: Run CMake
        run: |
          mkdir ${{ runner.workspace }}/build
          cd ${{ runner.workspace }}/build
          emcmake cmake -DSCN_CI=ON -DSCN_WERROR=OFF -DSCN_BENCHMARKS=OFF $GITHUB_WORKSPACE

      - name: Build
        working-directory: ${{ runner.workspace }}/build
        run: |
          emmake cmake --build . --parallel --verbose
